# direnv configuration for specer project
# This file is automatically loaded when you enter the directory (if direnv is installed)
# Install direnv: https://direnv.net/

# Load environment variables from env.local if it exists
if [[ -f env.local ]]; then
    echo "🔧 Loading environment variables from env.local..."
    # Manual parsing for reliable compatibility
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
            continue
        fi
        # Export variables
        if [[ "$line" =~ ^[[:space:]]*([^=]+)=(.*)$ ]]; then
            export "${BASH_REMATCH[1]}"="${BASH_REMATCH[2]}"
        fi
    done < env.local
    echo "✅ Environment loaded successfully!"
else
    echo "💡 No env.local file found."
    echo "   Copy env.local.example to env.local to get started:"
    echo "   cp env.local.example env.local"
fi

# Project-specific environment setup
export PYTHONPATH="${PWD}/src:${PYTHONPATH:-}"

# Set up development environment
echo "🚀 Specer development environment ready!"

# Note: SPEC's shrc must be sourced from within the SPEC directory
# To set up SPEC environment manually:
#   cd $SPEC_PATH && source shrc && cd -

# Show configured SPEC paths
if [[ -n "${TEST_SPEC_PATH:-}" ]]; then
    echo "🧪 TEST_SPEC_PATH: $TEST_SPEC_PATH"
else
    echo "⚠️  TEST_SPEC_PATH not set (tests will use mocked installations)"
fi

if [[ -n "${SPEC_PATH:-}" ]]; then
    echo "📊 SPEC_PATH: $SPEC_PATH"
else
    echo "💡 SPEC_PATH not set (CLI will require --spec-root argument)"
fi

# SPEC environment setup requires manual sourcing from SPEC directory
if [[ -n "${SPEC_PATH:-}" ]] || [[ -n "${TEST_SPEC_PATH:-}" ]]; then
    echo "💡 To set up SPEC environment: cd \$SPEC_PATH && source shrc && cd -"
fi
